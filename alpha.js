// Generated by CoffeeScript 1.7.1
(function() {
  var $$, $_, $_e, $d, $dd, $e, $n, cleanVtcArray, createVeryTemporaryCanvas, cropHeightOffset, cropWidthOffset, customEnded, customPlay, d, drawingLoop, ec, ecc, fileSelect, finishWebM, fontDraw, initVideosAndCanvas, log, makeGif, makeWebM, now, oc, occ, outDraw, qaVideoStartAndEnd, setCanvasWidthAndHeight, setCanvasWidthAndHeightByFraction, setEndTime, setFontSize, setFramerate, setVideoDuration, stopVideo, tc, tcc, tempDrawing, v, vtc_array, _DEBUG_, _GIF_, _WEBM_, _crop_bottom_, _crop_left_, _crop_right_, _crop_top_, _current_frame_, _end_time_, _framerate_, _global_drawing_loop_id_, _keep_ratio_, _loop_, _make_gif_now_, _make_webm_now_, _ref, _ref1, _start_time_, _text_, _video_chunk_duration_ms_, _video_is_playing_;

  _DEBUG_ = true;

  _video_is_playing_ = false;

  _global_drawing_loop_id_ = 0;

  _start_time_ = 0;

  _video_chunk_duration_ms_ = 10000;

  _end_time_ = 0;

  _loop_ = true;

  _keep_ratio_ = true;

  _framerate_ = 10;

  _current_frame_ = 0;

  _GIF_ = {};

  _make_gif_now_ = false;

  _WEBM_ = {};

  _make_webm_now_ = false;

  _crop_left_ = 0;

  _crop_top_ = 0;

  _crop_right_ = 0;

  _crop_bottom_ = 0;

  _text_ = {
    topstring: "TOP",
    bottomstring: "BOTTOM",
    fontsize: 34
  };

  $$ = function(id) {
    return document.getElementById(id);
  };

  $e = function(id, eventname, func) {
    log('hiho');
    return $$(id).addEventListener(eventname, function(evt) {
      return func(evt);
    });
  };

  $d = function(id) {
    return $$(id).setAttribute('disabled', 'disabled');
  };

  $dd = function(id) {
    return $$(id).removeAttribute('disabled');
  };

  $_ = function(selector) {
    return document.querySelectorAll(selector);
  };

  $n = function(name) {
    return document.getElementsByName(name);
  };

  $_e = function(selector, eventnames, func) {
    var elem, elements, eventname, _i, _len, _results;
    elements = $_(selector);
    d(elements);
    if (!Array.isArray(eventnames)) {
      eventnames = [eventnames];
    }
    _results = [];
    for (_i = 0, _len = eventnames.length; _i < _len; _i++) {
      eventname = eventnames[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = elements.length; _j < _len1; _j++) {
          elem = elements[_j];
          _results1.push((function(elem) {
            return elem.addEventListener(eventname, (function(e) {
              return func(e);
            }));
          })(elem));
        }
        return _results1;
      })());
    }
    return _results;
  };

  d = function(msg) {
    if (_DEBUG_) {
      console.log(msg);
    }
    return msg;
  };

  log = function(msg) {
    var li;
    li = document.createElement('li');
    li.innerHTML = msg;
    $$('loglist').appendChild(li);
    return $$('loglist').scrollTop = $$('loglist').scrollHeight;
  };

  now = ((_ref = window.performance) != null ? (_ref1 = _ref.now) != null ? _ref1.bind(window.performance) : void 0 : void 0) || Date.now;

  v = $$('input_video');

  tc = document.createElement('canvas');

  tcc = tc.getContext('2d');

  ec = document.createElement('canvas');

  ecc = ec.getContext('2d');

  oc = $$('out_canvas');

  occ = oc.getContext('2d');

  drawingLoop = function(i, o) {
    return _global_drawing_loop_id_ = window.setInterval((function() {
      tempDrawing(i, o);
      fontDraw();
      outDraw();
      if (v.currentTime >= v.duration) {
        return customEnded();
      }
    }), 1000 / _framerate_);
  };

  fontDraw = function() {
    ec.width = oc.width;
    ec.height = oc.height;
    ecc.textAlign = "center";
    ecc.strokeStyle = "black";
    ecc.fillStyle = "white";
    ecc.font = _text_.fontsize + "pt Impact";
    ecc.lineWidth = 2;
    ecc.drawImage(tc, 0, 0, oc.width, oc.height);
    ecc.fillText(_text_.topstring, oc.width / 2, _text_.fontsize + 5);
    ecc.strokeText(_text_.topstring, oc.width / 2, _text_.fontsize + 5);
    ecc.fillText(_text_.bottomstring, oc.width / 2, oc.height - 5);
    return ecc.strokeText(_text_.bottomstring, oc.width / 2, oc.height - 5);
  };

  tempDrawing = function(i, o) {
    o.canvas.width = v.width - cropWidthOffset(_crop_left_) - cropWidthOffset(_crop_right_);
    o.canvas.height = v.height - cropHeightOffset(_crop_top_) - cropWidthOffset(_crop_bottom_);
    return o.drawImage(i, cropWidthOffset(_crop_left_), cropHeightOffset(_crop_top_), i.width, i.height, 0, 0, i.width, i.height);
  };

  cropWidthOffset = function(crop_value, video) {
    if (video == null) {
      video = v;
    }
    return Math.floor(video.width * (crop_value / 100));
  };

  cropHeightOffset = function(crop_value, video) {
    if (video == null) {
      video = v;
    }
    return Math.floor(video.height * (crop_value / 100));
  };

  vtc_array = [];

  cleanVtcArray = function() {
    return vtc_array = [];
  };

  createVeryTemporaryCanvas = function(i) {
    var vtc, vtcc;
    vtc = document.createElement('canvas');
    vtc.width = i.width;
    vtc.height = i.height;
    vtcc = vtc.getContext('2d');
    vtcc.drawImage(i, 0, 0, i.width, i.height);
    return vtc;
  };

  outDraw = function() {
    var delayi;
    _current_frame_ = _current_frame_ + 1;
    $$('frame_counter').innerHTML = _current_frame_;
    occ.drawImage(ec, 0, 0, oc.width, oc.height);
    if (_make_gif_now_ === true || _make_webm_now_ === true) {
      delayi = 1000 / _framerate_;
      vtc_array.push(createVeryTemporaryCanvas(oc));
    }
    if (_make_gif_now_ === true) {
      _GIF_.addFrame(vtc_array[vtc_array.length - 1], {
        delay: delayi
      });
      log('gif add frame ' + _current_frame_ + ' ' + 'delay ' + delayi);
    }
    if (_make_webm_now_ === true) {
      _WEBM_.add(vtc_array[vtc_array.length - 1], delayi);
      return log('webm add frame ' + _current_frame_ + ' ' + 'delay ' + delayi);
    }
  };

  setEndTime = function(s, du) {
    if (s == null) {
      s = _start_time_;
    }
    if (du == null) {
      du = _video_chunk_duration_ms_;
    }
    d('start_time ' + _start_time_);
    d('duration time ' + du);
    _end_time_ = s + (du / 1000);
    return d('end_time ' + _end_time_);
  };

  initVideosAndCanvas = function(src, force_reset) {
    var display_width, h, resize_factor_width, w, _ref2;
    if (force_reset == null) {
      force_reset = false;
    }
    if (src != null) {
      v.src = src;
    }
    if (_end_time_ === 0 || force_reset === true) {
      _end_time_ = setEndTime();
      if (_end_time_ > v.duration) {
        _end_time_ = v.duration;
      }
    }
    if (force_reset === true) {
      _start_time_ = 0;
      $$('video_start').value = 0;
    }
    v.width = tc.width = v.videoWidth;
    v.height = tc.height = v.videoHeight;
    display_width = parseInt(window.getComputedStyle($$('display')).getPropertyValue('width'));
    if (display_width > 400) {
      display_width = 400;
    }
    resize_factor_width = display_width / v.width;
    if (resize_factor_width > 1) {
      resize_factor_width = 1;
    }
    _ref2 = setCanvasWidthAndHeightByFraction(resize_factor_width, resize_factor_width, false), w = _ref2[0], h = _ref2[1];
    $$('vc').style.height = oc.height;
    return $$('display').style.height = oc.height;
  };

  v.addEventListener('loadedmetadata', function() {
    log('metadata of video loaded');
    return initVideosAndCanvas();
  });

  v.addEventListener('playing', function() {
    _video_is_playing_ = true;
    return drawingLoop(v, tcc);
  });

  customPlay = function(restart) {
    if (restart == null) {
      restart = true;
    }
    if (restart) {
      stopVideo();
      d('_start_time_:' + _start_time_);
      v.currentTime = _start_time_;
      d('v.currentTime:' + v.currentTime);
      _video_is_playing_ = true;
      _current_frame_ = 0;
      return v.play();
    } else {
      if (_video_is_playing_ === false) {
        return customPlay(true);
      }
    }
  };

  stopVideo = function() {
    v.pause();
    return clearInterval(_global_drawing_loop_id_);
  };

  customEnded = function() {
    _video_is_playing_ = false;
    stopVideo();
    if (_loop_ === true) {
      customPlay();
    }
    if (_make_gif_now_ === true) {
      _make_gif_now_ = false;
      _GIF_.render();
    }
    if (_make_webm_now_ === true) {
      _make_webm_now_ = false;
      return finishWebM();
    }
  };

  v.addEventListener('ended', function() {
    return customEnded();
  });

  v.addEventListener('timeupdate', function() {
    if (v.currentTime > _end_time_) {
      return customEnded();
    }
  });

  qaVideoStartAndEnd = function() {
    var sv;
    setEndTime();
    $$('video_start').value = (_start_time_ / v.duration) * 100;
    $$('video_duration').value = _video_chunk_duration_ms_;
    sv = parseFloat($$('video_start').value);
    if (_end_time_ < _start_time_) {
      console.log('end time is smaller than start time');
      _end_time_ = _start_time_;
    }
    if (sv < 0) {
      $$('video_start').value = 0;
      _start_time_ = 0;
    }
    if (sv >= 100) {
      return $$('video_start').value = 99;
    }
  };

  $$('video_start').addEventListener('input', function() {
    _start_time_ = v.duration * (parseFloat($$('video_start').value) / 100);
    qaVideoStartAndEnd();
    return customPlay(true);
  });

  $_e('.start_plus_minus', 'click', function(e) {
    var p_m_ms;
    d(e);
    p_m_ms = parseInt(e.target.value);
    _start_time_ = _start_time_ + (p_m_ms / 1000);
    qaVideoStartAndEnd();
    return customPlay(true);
  });

  $_e('.test_start', 'click', function(e) {
    qaVideoStartAndEnd();
    return customPlay(true);
  });

  setCanvasWidthAndHeight = function(w, h) {
    oc.width = w;
    oc.height = h;
    return [w, h];
  };

  setCanvasWidthAndHeightByFraction = function(wp, hp, ratio) {
    var h, h_w_ratio, w, w_h_ratio;
    if (ratio == null) {
      ratio = _keep_ratio_;
    }
    if (wp != null) {
      $$('video_width').value = wp * 100;
    }
    if (hp != null) {
      $$('video_height').value = hp * 100;
    }
    w_h_ratio = Math.floor((oc.width / oc.height) * 100) / 100;
    h_w_ratio = Math.floor((oc.height / oc.width) * 100) / 100;
    w = oc.width;
    h = oc.height;
    if (wp != null) {
      w = parseInt(wp * tc.width);
    }
    if (hp != null) {
      h = parseInt(hp * tc.height);
    }
    if (wp !== null && wp !== void 0 && ratio === true) {
      h = parseInt(w / w_h_ratio);
      $$('video_height').value = (h / tc.height) * 100;
    } else if (hp !== null && hp !== void 0 && ratio === true) {
      w = parseInt(h / h_w_ratio);
      d($$('video_width').value);
      $$('video_width').value = (w / tc.width) * 100;
    }
    return setCanvasWidthAndHeight(w, h);
  };

  $$('video_width').addEventListener('input', function() {
    return setCanvasWidthAndHeightByFraction(parseInt($$('video_width').value) / 100);
  });

  $$('video_height').addEventListener('input', function() {
    var vh_percentage;
    vh_percentage = parseInt($$('video_height').value) / 100;
    return setCanvasWidthAndHeightByFraction(null, vh_percentage);
  });

  $$('ratio_yes').addEventListener('click', function() {
    return _keep_ratio_ = true;
  });

  $$('ratio_no').addEventListener('click', function() {
    return _keep_ratio_ = false;
  });

  $$('crop_left').addEventListener('input', function() {
    _crop_left_ = parseInt($$('crop_left').value);
    return setCanvasWidthAndHeightByFraction(parseInt($$('video_width').value) / 100, null, false);
  });

  $$('crop_right').addEventListener('input', function() {
    _crop_right_ = parseInt($$('crop_right').value);
    return setCanvasWidthAndHeightByFraction(parseInt($$('video_width').value) / 100, null, false);
  });

  $$('crop_top').addEventListener('input', function() {
    _crop_top_ = parseInt($$('crop_top').value);
    return setCanvasWidthAndHeightByFraction(null, parseInt($$('video_height').value) / 100, false);
  });

  $$('crop_bottom').addEventListener('input', function() {
    _crop_bottom_ = parseInt($$('crop_bottom').value);
    return setCanvasWidthAndHeightByFraction(null, parseInt($$('video_height').value) / 100, false);
  });

  setFramerate = function(fr) {
    var old_fr_value;
    old_fr_value = _framerate_;
    fr = parseInt(fr);
    if (fr < 1 || fr > 30 || isNaN(fr)) {
      d('out of bounds');
      $$('framerate').value = _framerate_ = old_fr_value;
    } else {
      _framerate_ = fr;
    }
    $$('fps').innerHTML = _framerate_;
    return d(fr);
  };

  $_e('#framerate', 'blur', function(e) {
    return setFramerate($$('framerate').value);
  });

  $$('set_framerate').addEventListener('click', function() {
    return setFramerate($$('framerate').value);
  });

  makeGif = function() {
    if (_make_gif_now_ === true) {
      log('gif creation already in progress');
      return false;
    }
    d('init gif creation');
    $d('make_gif');
    _GIF_ = new GIF({
      workerScript: './bower_components/gif.js/dist/gif.worker.js',
      width: oc.width,
      height: oc.height,
      workers: 2,
      quality: 20
    });
    _GIF_.on('start', function() {
      return log('gif creation started');
    });
    _GIF_.on('progress', function(p) {
      return log(("rendering: " + (Math.round(p * 100)) + "% ") + p);
    });
    _GIF_.on('finished', function(blob) {
      var url;
      log("gif finished");
      url = URL.createObjectURL(blob);
      log("<a href='" + url + "' target='blank' >open gif in new tab</a>");
      log("<a href='" + url + "' target='blank' download='gifmachine.gif' >download gif</a>");
      log("size " + ((blob.size / 1000).toFixed(2)) + "kb");
      return $dd('make_gif');
    });
    _make_gif_now_ = true;
    return customPlay(true);
  };

  makeWebM = function() {
    if (_make_webm_now_ === true) {
      log('webm creation already in progress');
      return false;
    }
    log('init webM creation');
    $d('make_webm');
    _WEBM_ = new Whammy.Video();
    _make_webm_now_ = true;
    return customPlay(true);
  };

  finishWebM = function() {
    var blob, url;
    log('compile webm');
    blob = _WEBM_.compile();
    log("webm finished");
    url = URL.createObjectURL(blob);
    log("<a href='" + url + "' target='blank' >open webm in new tab</a>");
    log("<a href='" + url + "' target='blank' download='gifmachine.webm' >download webm</a>");
    log("size " + ((blob.size / 1000).toFixed(2)) + "kb");
    _make_webm_now_ = false;
    return $dd('make_webm');
  };

  $$('make_gif').addEventListener('click', function() {
    return makeGif();
  });

  $e('make_webm', 'click', function() {
    return makeWebM();
  });

  fileSelect = function(event, action_per_file, finish_callback) {
    var f, files, r, _fn, _i, _len;
    files = event.target.files;
    r = [];
    _fn = function(f) {
      return r = action_per_file(f);
    };
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      f = files[_i];
      _fn(f);
    }
    return finish_callback(r);
  };

  $$('video_files').addEventListener('change', function(evt) {
    var file, reader;
    file = evt.target.files[0];
    log(file.name + ' (' + file.type + ') selected');
    if (!file.type.match('video')) {
      return log('Error: ' + escape(file.name) + ' is not a video!');
    } else {
      log(file.name + ' is a video');
      reader = new FileReader();
      reader.onload = function(reader_event) {
        var url;
        d(reader_event);
        log(reader_event);
        if (reader_event.target.readyState === FileReader.DONE) {
          log('file successfully loaded');
          url = window.URL.createObjectURL(new Blob([reader_event.target.result], {
            type: file.type
          }));
          log(url);
          return initVideosAndCanvas(url, true);
        }
      };
      return reader.readAsArrayBuffer(file);
    }
  });

  setVideoDuration = function(v) {
    v = parseInt(v);
    if (v < 0) {
      v = 1;
    }
    if (v > 20000) {
      v = 20000;
    }
    if (v == null) {
      v = 10000;
    }
    _video_chunk_duration_ms_ = v;
    setEndTime();
    customPlay(true);
    log(_end_time_);
    return qaVideoStartAndEnd();
  };

  $_e('#video_duration', 'blur', function(e) {
    return setVideoDuration($$('video_duration').value);
  });

  $_e('#video_duration_set', 'click', function(e) {
    return setVideoDuration($$('video_duration').value);
  });

  $_e('.video_duration_plus_minus', 'click', function(e) {
    var p_m_ms;
    d(e);
    p_m_ms = parseInt(e.target.value);
    setVideoDuration(parseInt($$('video_duration').value) + p_m_ms);
    qaVideoStartAndEnd();
    return customPlay(true);
  });

  $_e('#text_top', ['keydown', 'change', 'keyup'], function(e) {
    return _text_.topstring = $$('text_top').value.trim().toUpperCase();
  });

  $_e('#text_bottom', ['keydown', 'change', 'keyup'], function(e) {
    return _text_.bottomstring = $$('text_bottom').value.trim().toUpperCase();
  });

  setFontSize = function(s) {
    s = parseInt(s);
    if (s == null) {
      s = _text_.fontsize;
    }
    if (s < 0) {
      s = _text_.fontsize;
    }
    if (s > 250) {
      s = _text_.fontsize;
    }
    _text_.fontsize = s;
    return $$('fontsize').value = s;
  };

  $_e('#fontsize', 'blur', function(e) {
    return setFontSize($$('fontsize').value);
  });

  $$('set_fontsize').addEventListener('click', function() {
    return setFontSize($$('fontsize').value);
  });

}).call(this);
